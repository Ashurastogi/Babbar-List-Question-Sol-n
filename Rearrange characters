class Solution
{
	public static String rearrangeCharacters(String s) {
	
		int n = s.length();
		int i,j;
		char[] ch = s.toCharArray();
		HashMap<Character, Integer> hs = new HashMap<>();
		char first;
        int fvalue=0;
		
		for(i=0;i<n;i++){
		    if(hs.containsKey(ch[i]))
		        hs.put(ch[i], hs.get(ch[i])+1);
		    else
		        hs.put(ch[i], 1);
		        
		    if(fvalue<hs.get(ch[i])){
		        fvalue = hs.get(ch[i]);
		        first = ch[i];
		    }
		}
		
		List<Map.Entry<Character, Integer> > list
            = new LinkedList<Map.Entry<Character, Integer> >(
                hs.entrySet());
 
        // Sort the list using lambda expression
        Collections.sort(
            list,
            (i1,
             i2) -> i1.getValue().compareTo(i2.getValue()));
 
        // put data from sorted list to hashmap
        HashMap<Character, Integer> tmp
            = new LinkedHashMap<Character, Integer>();
        for (Map.Entry<Character, Integer> aa : list) {
            tmp.put(aa.getKey(), aa.getValue());
        }
                
                
        char []res = new char[n];
        
        int val=0;
        
        if(fvalue>(n-fvalue+1))
            return "-1";
        else{
            i = 0;
            j= 1;
            
            for (char key : tmp.keySet()) {

                val = tmp.get(key);
                
                while(val!=0 && i<n){
                    res[i] = key;
                    //System.out.println(res[i]+" "+key+" "+i);
                    i += 2;
                    val--;
                    
                }
                while(val!=0 && j<n){
                    res[j] = key;
                    //System.out.println(res[j]+" "+key+" "+j);
                    j += 2;
                    val--;
                }
            }
            
        }
        
        return String.valueOf(res);
	}
}
