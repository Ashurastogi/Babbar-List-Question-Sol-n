class Solution {
    static int checkMirrorTree(int n, int e, int[] a, int[] b) {
        int no = 2*e;
        Queue<Integer> q = new LinkedList<>();
        q.add(a[0]);
        if(b[0]!=a[0])
            return 0;
            
        int i=0;
        int start = 0;
        while(!q.isEmpty() && i<no){
            int num = q.peek();
            //System.out.println(num+" "+i);
            if(num==a[i]){
                q.add(a[i+1]);
                i+=2;
            }
            else{
                int res = solve(start,i-1,a,b);
                if(res==0)
                    return 0;
                    
                start = i;
                q.remove();
                
            }
        }
        int res = solve(start,i-1,a,b);
            if(res==0)
                return 0;
        
        return 1;
    }
    
    static int solve(int l, int r, int[] a, int[] b){
        int i=l;
        int j =r-1;
        
        //System.out.println(l+"hs  "+r);
        
        while(i<r && j>l){
            if(a[i]!=b[j] || a[i+1]!=b[j+1])
                return 0;
            i+=2;
            j-=2;
        }
        
        return 1;
    }
};
